{"version":3,"sources":["index.tsx"],"names":["HighlightText","autoEscape","caseSensitive","sanitize","searchWords","textToHighlight","highlightStyle","highlightComponent","textComponent","props","chunks","Text","RNText","Highlight","map","chunk","index","text","substr","start","end","highlight"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAQe,SAASA,aAAT,OAUQ;AAAA,MAVe;AACpCC,IAAAA,UADoC;AAEpCC,IAAAA,aAFoC;AAGpCC,IAAAA,QAHoC;AAIpCC,IAAAA,WAJoC;AAKpCC,IAAAA,eALoC;AAMpCC,IAAAA,cANoC;AAOpCC,IAAAA,kBAPoC;AAQpCC,IAAAA;AARoC,GAUf;AAAA,MADlBC,KACkB;;AACrB,QAAMC,MAAM,GAAG,iCAAQ;AACrBT,IAAAA,UADqB;AAErBC,IAAAA,aAFqB;AAGrBC,IAAAA,QAHqB;AAIrBC,IAAAA,WAJqB;AAKrBC,IAAAA;AALqB,GAAR,CAAf;AAOA,QAAMM,IAAI,GAAGH,aAAa,IAAII,iBAA9B;AACA,QAAMC,SAAS,GAAGN,kBAAkB,IAAIK,iBAAxC;AAEA,sBACE,6BAAC,IAAD,EAAUH,KAAV,EACGC,MAAM,CAACI,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC5B,UAAMC,IAAI,GAAGZ,eAAe,CAACa,MAAhB,CACXH,KAAK,CAACI,KADK,EAEXJ,KAAK,CAACK,GAAN,GAAYL,KAAK,CAACI,KAFP,CAAb;AAKA,WAAOJ,KAAK,CAACM,SAAN,gBACL,6BAAC,SAAD;AAAW,MAAA,GAAG,kBAAWL,KAAX,CAAd;AAAkC,MAAA,KAAK,EAAEV;AAAzC,OACGW,IADH,CADK,GAKLA,IALF;AAOD,GAbA,CADH,CADF;AAkBD","sourcesContent":["import React from 'react';\nimport { Text as RNText, TextProps, TextStyle } from 'react-native';\nimport { findAll, FindAllArgs } from 'highlight-words-core';\n\ninterface HighlightTextProps extends FindAllArgs, TextProps {\n  highlightStyle?: TextStyle;\n  highlightComponent?: React.ComponentType<TextProps>;\n  textComponent?: React.ComponentType<TextProps>;\n}\n\nexport default function HighlightText({\n  autoEscape,\n  caseSensitive,\n  sanitize,\n  searchWords,\n  textToHighlight,\n  highlightStyle,\n  highlightComponent,\n  textComponent,\n  ...props\n}: HighlightTextProps) {\n  const chunks = findAll({\n    autoEscape,\n    caseSensitive,\n    sanitize,\n    searchWords,\n    textToHighlight,\n  });\n  const Text = textComponent || RNText;\n  const Highlight = highlightComponent || RNText;\n\n  return (\n    <Text {...props}>\n      {chunks.map((chunk, index) => {\n        const text = textToHighlight.substr(\n          chunk.start,\n          chunk.end - chunk.start\n        );\n\n        return chunk.highlight ? (\n          <Highlight key={`chunk-${index}`} style={highlightStyle}>\n            {text}\n          </Highlight>\n        ) : (\n          text\n        );\n      })}\n    </Text>\n  );\n}\n"]}